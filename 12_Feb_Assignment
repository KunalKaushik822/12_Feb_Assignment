{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a991b97d-66cc-4442-8298-5fcba043e597",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q1. What is an Exception in python ? Write the difference between EXception and Syntax Errors.\n",
    "\n",
    "#Ans In Python, exceptions are specialized objects that signal the occurrence of unexpected conditions during program execution. \n",
    "# They serve as a mechanism to interrupt the normal flow of control and handle potential errors gracefully, preventing program crashes and promoting robustness."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "712b00b1-d54f-43ae-8d4a-995e5a7376bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This line will not be executed.\n"
     ]
    }
   ],
   "source": [
    "#Q2. What happens when an exception is not handled? Explain with an example.\n",
    "\n",
    "# When an exception is not handled in Python, it leads to unhandled exceptions, which ultimately terminate the program with an error message. \n",
    "\n",
    "def divide(num1, num2):\n",
    "    result = num1 / num2\n",
    "\n",
    "# Calling the function with a denominator of 0 (causing a ZeroDivisionError)\n",
    "try:\n",
    "    divide(10, 0)\n",
    "except:  # Empty except block: no handling\n",
    "    pass  # Do nothing (exception not actually handled)\n",
    "\n",
    "print(\"This line will not be executed.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e598dfc7-eb85-4cb1-8a05-21ec1b73e443",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result: 5.0\n",
      "This will always be executed.\n",
      "Division by zero is not allowed.\n",
      "This will always be executed.\n",
      "Invalid data types for division.\n",
      "This will always be executed.\n"
     ]
    }
   ],
   "source": [
    "# Q3. Which python statement are used to catch and handle exceptions? Explain with an example.\n",
    "\n",
    "#Ans The Python statements used to catch and handle exceptions are try, except, and optionally, finally. They form the try-except block, which provides a structured way to manage potential errors during program execution.\n",
    "\n",
    "# Here's a breakdown of their roles:\n",
    "\n",
    "# try block:\n",
    "\n",
    "# Encloses the code that might raise an exception.\n",
    "# Execution proceeds normally as long as no exceptions occur within the block.\n",
    "# except block:\n",
    "\n",
    "# Comes after the try block, following an optional colon (:).\n",
    "# Can be used one or more times to handle different types of exceptions.\n",
    "# Each except clause specifies the exception type to catch (using either the specific exception class or the general Exception class) and contains the code to execute when that exception is raised.\n",
    "# finally block (optional):\n",
    "\n",
    "# Comes after all except blocks, following an optional colon (:).\n",
    "# Contains code that is always executed, regardless of whether an exception occurred or not. This is useful for cleanup tasks like closing files or releasing resources.\n",
    "\n",
    "def divide(num1, num2):\n",
    "    try:\n",
    "        result = num1 / num2\n",
    "        print(\"Result:\", result)\n",
    "    except ZeroDivisionError:  # Catching specifically ZeroDivisionError\n",
    "        print(\"Division by zero is not allowed.\")\n",
    "    except TypeError:  # Catching any TypeError (optional)\n",
    "        print(\"Invalid data types for division.\")\n",
    "    finally:\n",
    "        print(\"This will always be executed.\")\n",
    "\n",
    "# Calling the function with various inputs\n",
    "divide(10, 2)  # Output: Result: 5.0\n",
    "divide(10, 0)  # Output: Division by zero is not allowed. This will always be executed.\n",
    "divide(\"10\", 2)  # Output: Invalid data types for division. This will always be executed.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e7f0f682-7796-4956-9ed8-aa5376fc4e74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are eligible.\n",
      "No errors occurred.\n",
      "Cleanup complete.\n",
      "Age must be 18 or older.\n",
      "Cleanup complete.\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Q4. Explain with an example :\n",
    "    \n",
    "    a. try and else\n",
    "    b. finally\n",
    "    c. raise\"\"\"\n",
    "\n",
    "def check_age(age):\n",
    "    try:\n",
    "        if age < 18:\n",
    "            raise ValueError(\"Age must be 18 or older.\")\n",
    "        else:\n",
    "            print(\"You are eligible.\")\n",
    "    except ValueError as e:\n",
    "        print(e)  # Print the error message\n",
    "    else:\n",
    "        print(\"No errors occurred.\")  # Only executed if no exceptions raised\n",
    "    finally:\n",
    "        print(\"Cleanup complete.\")  # Always executed\n",
    "\n",
    "check_age(20)  # Output: You are eligible. No errors occurred. Cleanup complete.\n",
    "check_age(15)  # Output: ValueError: Age must be 18 or older. Cleanup complete.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a17e080-b972-4908-8dd7-7f8bf9fa30b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Ans. Custom exceptions are user-defined classes that inherit from the built-in Exception class in Python. They allow you to create exception types that are specific to your application or module, providing more informative and meaningful error messages for your users and making your code easier to understand and maintain.'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Q5. What are Custom Exception in python? Why do we need Custom Exceptions? Explain with an example.\n",
    "\n",
    "\"\"\"Ans. Custom exceptions are user-defined classes that inherit from the built-in Exception class in Python. They allow you to create exception types that are specific to your application or module, providing more informative and meaningful error messages for your users and making your code easier to understand and maintain.\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "25b4646b-38d0-4f21-a7e2-326084c903ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You must be 18 or older to proceed.\n"
     ]
    }
   ],
   "source": [
    "class InvalidAgeError(Exception):\n",
    "    \"\"\"Raised when an invalid age is provided.\"\"\"\n",
    "    pass\n",
    "\n",
    "def check_age(age):\n",
    "    if age < 18:\n",
    "        raise InvalidAgeError(\"You must be 18 or older to proceed.\")\n",
    "    else:\n",
    "        print(\"You are eligible.\")\n",
    "\n",
    "try:\n",
    "    check_age(15)\n",
    "except InvalidAgeError as e:\n",
    "    print(e)  # Prints \"InvalidAgeError: You must be 18 or older to proceed.\"\n",
    "else:\n",
    "    print(\"No errors occurred.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a799231f-c48e-42db-be2a-9018cae80360",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q6. Create a custom exception class. Use this class to handle an exception.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
